<?php
/**
 * OrderLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  OGOship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OGOship API
 *
 * Description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tech@ogoship.zendesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace OGOship\Models;

use \ArrayAccess;
use \OGOship\ObjectSerializer;

/**
 * OrderLine Class Doc Comment
 *
 * @category Class
 * @package  OGOship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'quantity' => 'int',
        'unitPrice' => 'float',
        'vatPercentage' => 'float',
        'productInfoUrl' => 'string',
        'productPictureUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'quantity' => 'int32',
        'unitPrice' => 'decimal',
        'vatPercentage' => 'decimal',
        'productInfoUrl' => null,
        'productPictureUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'quantity' => 'quantity',
        'unitPrice' => 'unitPrice',
        'vatPercentage' => 'vatPercentage',
        'productInfoUrl' => 'productInfoUrl',
        'productPictureUrl' => 'productPictureUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'quantity' => 'setQuantity',
        'unitPrice' => 'setUnitPrice',
        'vatPercentage' => 'setVatPercentage',
        'productInfoUrl' => 'setProductInfoUrl',
        'productPictureUrl' => 'setProductPictureUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'quantity' => 'getQuantity',
        'unitPrice' => 'getUnitPrice',
        'vatPercentage' => 'getVatPercentage',
        'productInfoUrl' => 'getProductInfoUrl',
        'productPictureUrl' => 'getProductPictureUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unitPrice'] = isset($data['unitPrice']) ? $data['unitPrice'] : null;
        $this->container['vatPercentage'] = isset($data['vatPercentage']) ? $data['vatPercentage'] : null;
        $this->container['productInfoUrl'] = isset($data['productInfoUrl']) ? $data['productInfoUrl'] : null;
        $this->container['productPictureUrl'] = isset($data['productPictureUrl']) ? $data['productPictureUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code of product.
     *
     * @return $this
     */
    public function setCode($code)
    {

        if ((mb_strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling OrderLine., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity of products.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param float $unitPrice Sales price of single product. (Price including VAT).
     *
     * @return $this
     */
    public function setUnitPrice($unitPrice)
    {
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets vatPercentage
     *
     * @return float
     */
    public function getVatPercentage()
    {
        return $this->container['vatPercentage'];
    }

    /**
     * Sets vatPercentage
     *
     * @param float $vatPercentage Percentage of VAT included in sales price (UnitPrice).
     *
     * @return $this
     */
    public function setVatPercentage($vatPercentage)
    {
        $this->container['vatPercentage'] = $vatPercentage;

        return $this;
    }

    /**
     * Gets productInfoUrl
     *
     * @return string
     */
    public function getProductInfoUrl()
    {
        return $this->container['productInfoUrl'];
    }

    /**
     * Sets productInfoUrl
     *
     * @param string $productInfoUrl Full url of product info page. If there are lots of similar products then warehouse staff can use this page to verify products before shipping.
     *
     * @return $this
     */
    public function setProductInfoUrl($productInfoUrl)
    {
        $this->container['productInfoUrl'] = $productInfoUrl;

        return $this;
    }

    /**
     * Gets productPictureUrl
     *
     * @return string
     */
    public function getProductPictureUrl()
    {
        return $this->container['productPictureUrl'];
    }

    /**
     * Sets productPictureUrl
     *
     * @param string $productPictureUrl Full url of product picture. If there are lots of similar products then warehouse staff can use this page to verify products before shipping.
     *
     * @return $this
     */
    public function setProductPictureUrl($productPictureUrl)
    {
        $this->container['productPictureUrl'] = $productPictureUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


