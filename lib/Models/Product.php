<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  OGOship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OGOship API
 *
 * Description
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tech@ogoship.zendesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace OGOship\Models;

use \ArrayAccess;
use \OGOship\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OGOship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'code' => 'string',
        'supplierCode' => 'string',
        'supplier' => 'string',
        'group' => 'string',
        'eanCode' => 'string',
        'supplyPrice' => 'float',
        'currencyCode' => 'string',
        'infoUrl' => 'string',
        'pictureUrl' => 'string',
        'countryOfOrigin' => 'string',
        'languageCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'code' => null,
        'supplierCode' => null,
        'supplier' => null,
        'group' => null,
        'eanCode' => null,
        'supplyPrice' => 'decimal',
        'currencyCode' => null,
        'infoUrl' => null,
        'pictureUrl' => null,
        'countryOfOrigin' => null,
        'languageCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'code' => 'code',
        'supplierCode' => 'supplierCode',
        'supplier' => 'supplier',
        'group' => 'group',
        'eanCode' => 'eanCode',
        'supplyPrice' => 'supplyPrice',
        'currencyCode' => 'currencyCode',
        'infoUrl' => 'infoUrl',
        'pictureUrl' => 'pictureUrl',
        'countryOfOrigin' => 'countryOfOrigin',
        'languageCode' => 'languageCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'code' => 'setCode',
        'supplierCode' => 'setSupplierCode',
        'supplier' => 'setSupplier',
        'group' => 'setGroup',
        'eanCode' => 'setEanCode',
        'supplyPrice' => 'setSupplyPrice',
        'currencyCode' => 'setCurrencyCode',
        'infoUrl' => 'setInfoUrl',
        'pictureUrl' => 'setPictureUrl',
        'countryOfOrigin' => 'setCountryOfOrigin',
        'languageCode' => 'setLanguageCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'code' => 'getCode',
        'supplierCode' => 'getSupplierCode',
        'supplier' => 'getSupplier',
        'group' => 'getGroup',
        'eanCode' => 'getEanCode',
        'supplyPrice' => 'getSupplyPrice',
        'currencyCode' => 'getCurrencyCode',
        'infoUrl' => 'getInfoUrl',
        'pictureUrl' => 'getPictureUrl',
        'countryOfOrigin' => 'getCountryOfOrigin',
        'languageCode' => 'getLanguageCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['supplierCode'] = isset($data['supplierCode']) ? $data['supplierCode'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['eanCode'] = isset($data['eanCode']) ? $data['eanCode'] : null;
        $this->container['supplyPrice'] = isset($data['supplyPrice']) ? $data['supplyPrice'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['infoUrl'] = isset($data['infoUrl']) ? $data['infoUrl'] : null;
        $this->container['pictureUrl'] = isset($data['pictureUrl']) ? $data['pictureUrl'] : null;
        $this->container['countryOfOrigin'] = isset($data['countryOfOrigin']) ? $data['countryOfOrigin'] : null;
        $this->container['languageCode'] = isset($data['languageCode']) ? $data['languageCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['countryOfOrigin']) && (mb_strlen($this->container['countryOfOrigin']) > 2)) {
            $invalidProperties[] = "invalid value for 'countryOfOrigin', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['countryOfOrigin']) && (mb_strlen($this->container['countryOfOrigin']) < 2)) {
            $invalidProperties[] = "invalid value for 'countryOfOrigin', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['languageCode'] === null) {
            $invalidProperties[] = "'languageCode' can't be null";
        }
        if ((mb_strlen($this->container['languageCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'languageCode', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['languageCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'languageCode', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name of product.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Additional information about product.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique product code.
     *
     * @return $this
     */
    public function setCode($code)
    {

        if ((mb_strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Product., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets supplierCode
     *
     * @return string
     */
    public function getSupplierCode()
    {
        return $this->container['supplierCode'];
    }

    /**
     * Sets supplierCode
     *
     * @param string $supplierCode Supplier given code of this product.
     *
     * @return $this
     */
    public function setSupplierCode($supplierCode)
    {
        $this->container['supplierCode'] = $supplierCode;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string $supplier Name of supplier.
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group Group of product.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets eanCode
     *
     * @return string
     */
    public function getEanCode()
    {
        return $this->container['eanCode'];
    }

    /**
     * Sets eanCode
     *
     * @param string $eanCode EAN code of product. Existing EAN code will not be overwritten.
     *
     * @return $this
     */
    public function setEanCode($eanCode)
    {
        $this->container['eanCode'] = $eanCode;

        return $this;
    }

    /**
     * Gets supplyPrice
     *
     * @return float
     */
    public function getSupplyPrice()
    {
        return $this->container['supplyPrice'];
    }

    /**
     * Sets supplyPrice
     *
     * @param float $supplyPrice Supply price of product for calculating value of stock.
     *
     * @return $this
     */
    public function setSupplyPrice($supplyPrice)
    {
        $this->container['supplyPrice'] = $supplyPrice;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode Currency of supply price. (ISO 4217 Code).
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets infoUrl
     *
     * @return string
     */
    public function getInfoUrl()
    {
        return $this->container['infoUrl'];
    }

    /**
     * Sets infoUrl
     *
     * @param string $infoUrl Url of product page at webstore. This helps warehouse staff to recognize products.
     *
     * @return $this
     */
    public function setInfoUrl($infoUrl)
    {
        $this->container['infoUrl'] = $infoUrl;

        return $this;
    }

    /**
     * Gets pictureUrl
     *
     * @return string
     */
    public function getPictureUrl()
    {
        return $this->container['pictureUrl'];
    }

    /**
     * Sets pictureUrl
     *
     * @param string $pictureUrl Url of product picture at webstore. This helps warehouse staff to recognize products.
     *
     * @return $this
     */
    public function setPictureUrl($pictureUrl)
    {
        $this->container['pictureUrl'] = $pictureUrl;

        return $this;
    }

    /**
     * Gets countryOfOrigin
     *
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['countryOfOrigin'];
    }

    /**
     * Sets countryOfOrigin
     *
     * @param string $countryOfOrigin Country of origin for customs info. Use two-letter codes: ISO 3166-1 alpha-2. If not set, sending country will be used.
     *
     * @return $this
     */
    public function setCountryOfOrigin($countryOfOrigin)
    {
        if (!is_null($countryOfOrigin) && (mb_strlen($countryOfOrigin) > 2)) {
            throw new \InvalidArgumentException('invalid length for $countryOfOrigin when calling Product., must be smaller than or equal to 2.');
        }
        if (!is_null($countryOfOrigin) && (mb_strlen($countryOfOrigin) < 2)) {
            throw new \InvalidArgumentException('invalid length for $countryOfOrigin when calling Product., must be bigger than or equal to 2.');
        }

        $this->container['countryOfOrigin'] = $countryOfOrigin;

        return $this;
    }

    /**
     * Gets languageCode
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['languageCode'];
    }

    /**
     * Sets languageCode
     *
     * @param string $languageCode Language code for product info text. Use two-letter codes: ISO 639-1. Warehouses have supported / valid languages: TLL: fi, en. GOT: en, sv. VNT: fi, en
     *
     * @return $this
     */
    public function setLanguageCode($languageCode)
    {
        if ((mb_strlen($languageCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $languageCode when calling Product., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($languageCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $languageCode when calling Product., must be bigger than or equal to 2.');
        }

        $this->container['languageCode'] = $languageCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


